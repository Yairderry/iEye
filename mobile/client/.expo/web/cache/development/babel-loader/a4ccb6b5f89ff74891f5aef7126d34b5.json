{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\derry\\\\Downloads\\\\masksdetection-react-native-app-master\\\\masksdetection-react-native-app-master\\\\App.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Text, Button, Card, Overlay } from \"react-native-elements\";\nimport { Camera } from \"expo-camera\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport \"@tensorflow/tfjs-react-native\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport * as jpeg from \"jpeg-js\";\nexport default function App() {\n  var statusList = [\"Loading Model...\", \"Classifying Image...\", \"Predicting Image...\"];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isTfReady = _useState6[0],\n      setIsTfReady = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      cocoSsdModel = _useState8[0],\n      setCocoSsdModel = _useState8[1];\n\n  var cameraRef = useRef();\n\n  var _useState9 = useState(statusList[0]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      status = _useState10[0],\n      setStatus = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isLoading = _useState12[0],\n      setIsLoading = _useState12[1];\n\n  var flip = function flip() {};\n\n  var getPredictions = function getPredictions() {\n    var photo, image, imageTensor, detections;\n    return _regeneratorRuntime.async(function getPredictions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!cameraRef.current) {\n              _context.next = 17;\n              break;\n            }\n\n            console.log(\"[+] Analysing Photo\");\n            setStatus(statusList[2]);\n            setIsLoading(true);\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(cameraRef.current.takePictureAsync({\n              skipProcessing: true\n            }));\n\n          case 6:\n            photo = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(resizeImage(photo.uri, 224, 224));\n\n          case 9:\n            image = _context.sent;\n            imageTensor = base64ImageToTensor(image.base64);\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(cocoSsdModel.detect(imageTensor));\n\n          case 13:\n            detections = _context.sent;\n            console.log(\"detections\", detections);\n            setIsLoading(false);\n            console.log(\"[+] Photo Analysed\");\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function base64ImageToTensor(base64) {\n    var rawImageData = tf.util.encodeString(base64, \"base64\");\n    var TO_UINT8ARRAY = true;\n\n    var _jpeg$decode = jpeg.decode(rawImageData, TO_UINT8ARRAY),\n        width = _jpeg$decode.width,\n        height = _jpeg$decode.height,\n        data = _jpeg$decode.data;\n\n    var buffer = new Uint8Array(width * height * 3);\n    var offset = 0;\n\n    for (var i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  function resizeImage(imageUrl, width, height) {\n    var actions, saveOptions, res;\n    return _regeneratorRuntime.async(function resizeImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            actions = [{\n              resize: {\n                width: width,\n                height: height\n              }\n            }];\n            saveOptions = {\n              compress: 0.75,\n              format: ImageManipulator.SaveFormat.JPEG,\n              base64: true\n            };\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(ImageManipulator.manipulateAsync(imageUrl, actions, saveOptions));\n\n          case 4:\n            res = _context2.sent;\n            return _context2.abrupt(\"return\", res);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, _status, model;\n\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (isTfReady) {\n                _context3.next = 18;\n                break;\n              }\n\n              console.log(\"[+] Loading TF Model\");\n              setStatus(statusList[0]);\n              setIsLoading(true);\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 6:\n              _await$Camera$request = _context3.sent;\n              _status = _await$Camera$request.status;\n              setHasPermission(_status === \"granted\");\n              _context3.next = 11;\n              return _regeneratorRuntime.awrap(tf.ready());\n\n            case 11:\n              setIsTfReady(true);\n              _context3.next = 14;\n              return _regeneratorRuntime.awrap(cocoSsd.load());\n\n            case 14:\n              model = _context3.sent;\n              setCocoSsdModel(model);\n              setIsLoading(false);\n              console.log(\"[+] TF Model Loaded\");\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [isTfReady]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, React.createElement(Overlay, {\n    isVisible: isLoading,\n    fullScreen: true,\n    overlayStyle: {\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, status), React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"lightblue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }))), React.createElement(View, {\n    style: {\n      width: 224,\n      height: 224\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, React.createElement(Camera, {\n    style: {\n      flex: 1\n    },\n    type: type,\n    ref: cameraRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: {\n      flexDirection: \"row\",\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Predict\",\n    onPress: function onPress() {\n      getPredictions();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"flip\",\n    onPress: function onPress() {\n      getPredictions();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/derry/Downloads/masksdetection-react-native-app-master/masksdetection-react-native-app-master/App.js"],"names":["React","useState","useEffect","useRef","Text","Button","Card","Overlay","Camera","ImageManipulator","tf","cocoSsd","jpeg","App","statusList","hasPermission","setHasPermission","Constants","Type","back","type","setType","isTfReady","setIsTfReady","cocoSsdModel","setCocoSsdModel","cameraRef","status","setStatus","isLoading","setIsLoading","flip","getPredictions","current","console","log","takePictureAsync","skipProcessing","photo","resizeImage","uri","image","imageTensor","base64ImageToTensor","base64","detect","detections","rawImageData","util","encodeString","TO_UINT8ARRAY","decode","width","height","data","buffer","Uint8Array","offset","i","length","tensor3d","imageUrl","actions","resize","saveOptions","compress","format","SaveFormat","JPEG","manipulateAsync","res","requestPermissionsAsync","ready","load","model","styles","container","alignItems","justifyContent","marginBottom","flex","flexDirection","padding","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { StyleSheet, View, Dimensions, ActivityIndicator } from \"react-native\";\nimport { Text, Button, Card, Overlay } from \"react-native-elements\";\nimport { Camera } from \"expo-camera\";\nimport * as ImageManipulator from \"expo-image-manipulator\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport \"@tensorflow/tfjs-react-native\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport * as jpeg from \"jpeg-js\";\nexport default function App() {\n  const statusList = [\n    \"Loading Model...\",\n    \"Classifying Image...\",\n    \"Predicting Image...\",\n  ];\n  const [hasPermission, setHasPermission] = useState(null);\n  const [type, setType] = useState(Camera.Constants.Type.back);\n  const [isTfReady, setIsTfReady] = useState(false);\n  const [cocoSsdModel, setCocoSsdModel] = useState(null);\n  const cameraRef = useRef();\n  const [status, setStatus] = useState(statusList[0]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const flip = () => {};\n\n  const getPredictions = async () => {\n    if (cameraRef.current) {\n      console.log(\"[+] Analysing Photo\");\n      setStatus(statusList[2]);\n      setIsLoading(true);\n      const photo = await cameraRef.current.takePictureAsync({\n        skipProcessing: true,\n      });\n      const image = await resizeImage(photo.uri, 224, 224);\n      const imageTensor = base64ImageToTensor(image.base64);\n      const detections = await cocoSsdModel.detect(imageTensor);\n      console.log(\"detections\", detections);\n      setIsLoading(false);\n      console.log(\"[+] Photo Analysed\");\n    }\n  };\n\n  function base64ImageToTensor(base64) {\n    //Function to convert jpeg image to tensors\n    const rawImageData = tf.util.encodeString(base64, \"base64\");\n    const TO_UINT8ARRAY = true;\n    const { width, height, data } = jpeg.decode(rawImageData, TO_UINT8ARRAY);\n    // Drop the alpha channel info for mobilenet\n    const buffer = new Uint8Array(width * height * 3);\n    let offset = 0; // offset into original data\n    for (let i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  async function resizeImage(imageUrl, width, height) {\n    const actions = [{ resize: { width, height } }];\n    const saveOptions = {\n      compress: 0.75,\n      format: ImageManipulator.SaveFormat.JPEG,\n      base64: true,\n    };\n    const res = await ImageManipulator.manipulateAsync(\n      imageUrl,\n      actions,\n      saveOptions\n    );\n    return res;\n  }\n\n  useEffect(() => {\n    (async () => {\n      if (!isTfReady) {\n        console.log(\"[+] Loading TF Model\");\n        setStatus(statusList[0]);\n        setIsLoading(true);\n        let { status } = await Camera.requestPermissionsAsync();\n        setHasPermission(status === \"granted\");\n        await tf.ready();\n        setIsTfReady(true);\n        const model = await cocoSsd.load();\n        setCocoSsdModel(model);\n        setIsLoading(false);\n        console.log(\"[+] TF Model Loaded\");\n      }\n    })();\n  }, [isTfReady]);\n\n  return (\n    <View style={styles.container}>\n      <Overlay\n        isVisible={isLoading}\n        fullScreen={true}\n        overlayStyle={{ alignItems: \"center\", justifyContent: \"center\" }}\n      >\n        <View>\n          <Text style={{ marginBottom: 10 }}>{status}</Text>\n          <ActivityIndicator size=\"large\" color=\"lightblue\" />\n        </View>\n      </Overlay>\n      <View style={{ width: 224, height: 224 }}>\n        <Camera style={{ flex: 1 }} type={type} ref={cameraRef}></Camera>\n      </View>\n\n      <View style={{ flexDirection: \"row\", padding: 5 }}>\n        <View style={{ flex: 1, padding: 5 }}>\n          <Button\n            title=\"Predict\"\n            onPress={() => {\n              getPredictions();\n            }}\n          />\n        </View>\n        <View style={{ flex: 1, padding: 5 }}>\n          <Button\n            title=\"flip\"\n            onPress={() => {\n              getPredictions();\n            }}\n          />\n        </View>\n      </View>\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}